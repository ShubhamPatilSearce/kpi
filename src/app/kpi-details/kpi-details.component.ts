import { Component, OnInit, ViewChild} from '@angular/core';
import { Chart, ChartData } from 'chart.js';
import * as moment from 'moment';
import 'chartjs-chart-box-and-violin-plot';
import * as _ from 'lodash';


// import { Chart, registerables } from 'node_modules/chart.js';
//Chart.register(...registerables);

@Component({
  selector: 'app-kpi-details',
  templateUrl: './kpi-details.component.html',
  styleUrls: ['./kpi-details.component.css'],
})
export class KpiDetailsComponent implements OnInit {



  constructor() {
  }


  ngOnInit(): void {}

  canvas: any;
  ctx: any;
  canvas1: any;
  ctx1: any;
  @ViewChild('mychart') mychart: any;
  @ViewChild('mychart2') mychart2: any;
  @ViewChild('mychart3') mychart3: any;

  

  chart_type = '';

   oDatesArr :any=[];oKpiArr:any=[];oPlannedArr:any=[];
   
  boxplotdata:any;
  frequencydate:any='';
  area:any='MD';
  mixedChart: any;
  boxKpiChart: any;
  boxPlannedChart: any;
  myBoxChart: any;
  outliers:any = [];
  bptooltip:any;
  //dates=['2021-08-25','2021-08-26','2021-08-27','2021-08-28','2021-08-29','2021-08-30','2021-08-31'];
  datapoints = [
    "65.0",
    "67.0",
    "66.0",
    "65.0",
    "76.0",
    "74.0",
    "70.0",
    "60.0",
    "61.0",
    "68.0",
    "64.0",
    "64.0",
    "72.0",
    "68.0",
    "68.0",
    "63.0",
    "68.0",
    "60.0",
    "68.0",
    "63.0",
    "63.0",
    "53.0",
    "61.0",
    "66.0",
    "70.0",
    "64.0",
    "63.0",
    "67.0",
    "70.0",
    "67.0",
    "70.0",
    "66.0",
    "65.0",
    "65.0",
    "69.0",
    "58.0",
    "55.0",
    "30.0",
    "28.0",
    "35.0",
    "45.0",
    "36.0",
    "35.0",
    "63.0",
    "69.0",
    "64.0",
    "65.0",
    "68.0",
    "67.0",
    "66.0",
    "68.0",
    "61.0",
    "67.0",
    "59.0",
    "65.0",
    "65.0",
    "67.0",
    "64.0",
    "65.0",
    "69.0",
    "66.0",
    "60.0",
    "40.0",
    "66.0",
    "65.0",
    "66.0",
    "62.0",
    "68.0",
    "65.0",
    "68.0",
    "66.0",
    "62.0",
    "66.0",
    "65.0",
    "67.0",
    "64.0",
    "54.0",
    "48.0",
    "69.0",
    "66.0",
    "67.0",
    "69.0",
    "66.0",
    "67.0",
    "66.0",
    "61.0",
    "66.0",
    "64.0",
    "66.0",
    "65.0",
    "44.0",
    "64.0",
    "61.0",
    "64.0",
    "64.0",
    "69.0",
    "62.0",
    "66.0",
    "61.0",
    "53.0",
    "63.0",
    "67.0",
    "65.0",
    "61.0",
    "46.0",
    "54.0",
    "66.0",
    "69.0",
    "65.0",
    "69.0",
    "62.0",
    "68.0",
    "61.0",
    "58.0",
    "64.0",
    "62.0",
    "61.0",
    "63.0",
    "64.0",
    "66.0",
    "62.0",
    "63.0",
    "66.0",
    "55.0",
    "66.0",
    "62.0",
    "68.0",
    "56.0",
    "58.0",
    "44.0",
    "35.0",
    "36.0",
    "34.0",
    "37.0",
    "20.0",
    "0.0",
    "35.0",
    "66.0",
    "57.0",
    "57.0",
    "66.0",
    "66.0",
    "53.0",
    "69.0",
    "63.0",
    "60.0",
    "59.0",
    "64.0",
    "68.0",
    "66.0",
    "64.0",
    "67.0",
    "66.0",
    "61.0",
    "60.0",
    "64.0",
    "65.0",
    "59.0",
    "62.0",
    "69.0",
    "64.0",
    "60.0",
    "66.0",
    "63.0",
    "68.0",
    "64.0",
    "64.0",
    "60.0",
    "65.0",
    "65.0",
    "64.0",
    "60.0",
    "64.0",
    "45.0",
    "62.0",
    "57.0",
    "60.0",
    "41.0",
    "60.0",
    "42.0",
    "41.0",
    "61.0",
    "66.0",
    "57.0",
    "67.0",
    "66.0",
    "66.0",
    "56.0",
    "62.0",
    "56.0",
    "64.0",
    "54.0",
    "39.0",
    "36.0",
    "48.0",
    "47.0",
    "61.0",
    "64.0",
    "64.0",
    "71.0",
    "69.0",
    "62.0",
    "59.0",
    "67.0",
    "64.0",
    "61.0",
    "67.0",
    "61.0",
    "68.0",
    "59.0",
    "32.0",
    "69.0",
    "57.0",
    "64.0",
    "67.0",
    "65.0",
    "72.0",
    "65.0",
    "66.0",
    "63.0",
    "68.0",
    "74.0",
    "60.0",
    "65.0",
    "64.0",
    "65.0",
    "69.0",
    "70.0",
    "60.0",
    "67.0",
    "71.0",
    "69.0",
    "58.0",
    "54.0",
    "50.0",
    "39.0",
    "39.0",
    "24.0",
    "42.0",
    "38.0",
    "35.0",
    "69.0",
    "65.0",
    "54.0",
    "65.0",
    "71.0",
    "68.0",
    "70.0",
    "62.0",
    "66.0",
    "69.0",
    "66.0",
    "68.0",
    "66.0",
    "65.0",
    "66.0",
    "65.0",
    "70.0",
    "71.0",
    "58.0",
    "65.0",
    "66.0",
    "69.0",
    "68.0",
    "62.0",
    "39.0",
    "65.0",
    "69.0",
    "69.0",
    "66.0",
    "69.0",
    "64.0",
    "69.0",
    "67.0",
    "65.0",
    "61.0",
    "67.0",
    "72.0",
    "63.0",
    "74.0",
    "68.0",
    "75.0",
    "62.0",
    "71.0",
    "69.0",
    "68.0",
    "55.0",
    "66.0",
    "69.0",
    "66.0",
    "67.0",
    "67.0",
    "71.0",
    "65.0",
    "69.0",
    "64.0",
    "68.0",
    "68.0",
    "69.0",
    "70.0",
    "66.0",
    "54.0",
    "58.0",
    "37.0",
    "66.0",
    "63.0",
    "62.0",
    "71.0",
    "67.0",
    "63.0",
    "65.0",
    "65.0",
    "48.0",
    "53.0",
    "53.0",
    "56.0",
    "69.0",
    "62.0",
    "60.0",
    "66.0",
    "68.0",
    "63.0",
    "58.0",
    "65.0",
    "65.0",
    "64.0",
    "62.0",
    "61.0",
    "63.0",
    "66.0",
    "67.0",
    "57.0",
    "65.0",
    "63.0",
    "62.0",
    "38.0",
    "59.0",
    "57.0",
    "61.0",
    "67.0",
    "63.0",
    "54.0",
    "55.0",
    "62.0",
    "66.0",
    "67.0",
    "60.0",
    "62.0",
    "65.0",
    "64.0",
    "64.0",
    "61.0",
    "58.0",
    "61.0",
    "63.0",
    "66.0",
    "46.0",
    "33.0",
    "47.0",
    "35.0",
    "41.0"
  ];
  dateArray = [
    "2022-04-04 00:00:00.000000000",
    "2022-04-03 00:00:00.000000000",
    "2022-04-02 00:00:00.000000000",
    "2022-04-01 00:00:00.000000000",
    "2022-03-31 00:00:00.000000000",
    "2022-03-30 00:00:00.000000000",
    "2022-03-29 00:00:00.000000000",
    "2022-03-28 00:00:00.000000000",
    "2022-03-27 00:00:00.000000000",
    "2022-03-26 00:00:00.000000000",
    "2022-03-25 00:00:00.000000000",
    "2022-03-24 00:00:00.000000000",
    "2022-03-23 00:00:00.000000000",
    "2022-03-22 00:00:00.000000000",
    "2022-03-21 00:00:00.000000000",
    "2022-03-20 00:00:00.000000000",
    "2022-03-19 00:00:00.000000000",
    "2022-03-18 00:00:00.000000000",
    "2022-03-17 00:00:00.000000000",
    "2022-03-16 00:00:00.000000000",
    "2022-03-15 00:00:00.000000000",
    "2022-03-14 00:00:00.000000000",
    "2022-03-13 00:00:00.000000000",
    "2022-03-12 00:00:00.000000000",
    "2022-03-11 00:00:00.000000000",
    "2022-03-10 00:00:00.000000000",
    "2022-03-09 00:00:00.000000000",
    "2022-03-08 00:00:00.000000000",
    "2022-03-07 00:00:00.000000000",
    "2022-03-06 00:00:00.000000000",
    "2022-03-05 00:00:00.000000000",
    "2022-03-04 00:00:00.000000000",
    "2022-03-03 00:00:00.000000000",
    "2022-03-02 00:00:00.000000000",
    "2022-03-01 00:00:00.000000000",
    "2022-02-28 00:00:00.000000000",
    "2022-02-27 00:00:00.000000000",
    "2022-02-26 00:00:00.000000000",
    "2022-02-25 00:00:00.000000000",
    "2022-02-24 00:00:00.000000000",
    "2022-02-23 00:00:00.000000000",
    "2022-02-22 00:00:00.000000000",
    "2022-02-21 00:00:00.000000000",
    "2022-02-20 00:00:00.000000000",
    "2022-02-19 00:00:00.000000000",
    "2022-02-18 00:00:00.000000000",
    "2022-02-17 00:00:00.000000000",
    "2022-02-16 00:00:00.000000000",
    "2022-02-15 00:00:00.000000000",
    "2022-02-14 00:00:00.000000000",
    "2022-02-13 00:00:00.000000000",
    "2022-02-12 00:00:00.000000000",
    "2022-02-11 00:00:00.000000000",
    "2022-02-10 00:00:00.000000000",
    "2022-02-09 00:00:00.000000000",
    "2022-02-08 00:00:00.000000000",
    "2022-02-07 00:00:00.000000000",
    "2022-02-06 00:00:00.000000000",
    "2022-02-05 00:00:00.000000000",
    "2022-02-04 00:00:00.000000000",
    "2022-02-03 00:00:00.000000000",
    "2022-02-02 00:00:00.000000000",
    "2022-02-01 00:00:00.000000000",
    "2022-01-31 00:00:00.000000000",
    "2022-01-30 00:00:00.000000000",
    "2022-01-29 00:00:00.000000000",
    "2022-01-28 00:00:00.000000000",
    "2022-01-27 00:00:00.000000000",
    "2022-01-26 00:00:00.000000000",
    "2022-01-25 00:00:00.000000000",
    "2022-01-24 00:00:00.000000000",
    "2022-01-23 00:00:00.000000000",
    "2022-01-22 00:00:00.000000000",
    "2022-01-21 00:00:00.000000000",
    "2022-01-20 00:00:00.000000000",
    "2022-01-19 00:00:00.000000000",
    "2022-01-18 00:00:00.000000000",
    "2022-01-17 00:00:00.000000000",
    "2022-01-16 00:00:00.000000000",
    "2022-01-15 00:00:00.000000000",
    "2022-01-14 00:00:00.000000000",
    "2022-01-13 00:00:00.000000000",
    "2022-01-12 00:00:00.000000000",
    "2022-01-11 00:00:00.000000000",
    "2022-01-10 00:00:00.000000000",
    "2022-01-09 00:00:00.000000000",
    "2022-01-08 00:00:00.000000000",
    "2022-01-07 00:00:00.000000000",
    "2022-01-06 00:00:00.000000000",
    "2022-01-05 00:00:00.000000000",
    "2022-01-04 00:00:00.000000000",
    "2022-01-03 00:00:00.000000000",
    "2022-01-02 00:00:00.000000000",
    "2022-01-01 00:00:00.000000000",
    "2021-12-31 00:00:00.000000000",
    "2021-12-30 00:00:00.000000000",
    "2021-12-29 00:00:00.000000000",
    "2021-12-28 00:00:00.000000000",
    "2021-12-27 00:00:00.000000000",
    "2021-12-26 00:00:00.000000000",
    "2021-12-25 00:00:00.000000000",
    "2021-12-24 00:00:00.000000000",
    "2021-12-23 00:00:00.000000000",
    "2021-12-22 00:00:00.000000000",
    "2021-12-21 00:00:00.000000000",
    "2021-12-20 00:00:00.000000000",
    "2021-12-19 00:00:00.000000000",
    "2021-12-18 00:00:00.000000000",
    "2021-12-17 00:00:00.000000000",
    "2021-12-16 00:00:00.000000000",
    "2021-12-15 00:00:00.000000000",
    "2021-12-14 00:00:00.000000000",
    "2021-12-13 00:00:00.000000000",
    "2021-12-12 00:00:00.000000000",
    "2021-12-11 00:00:00.000000000",
    "2021-12-10 00:00:00.000000000",
    "2021-12-09 00:00:00.000000000",
    "2021-12-08 00:00:00.000000000",
    "2021-12-07 00:00:00.000000000",
    "2021-12-06 00:00:00.000000000",
    "2021-12-05 00:00:00.000000000",
    "2021-12-04 00:00:00.000000000",
    "2021-12-03 00:00:00.000000000",
    "2021-12-02 00:00:00.000000000",
    "2021-12-01 00:00:00.000000000",
    "2021-11-30 00:00:00.000000000",
    "2021-11-29 00:00:00.000000000",
    "2021-11-28 00:00:00.000000000",
    "2021-11-27 00:00:00.000000000",
    "2021-11-26 00:00:00.000000000",
    "2021-11-25 00:00:00.000000000",
    "2021-11-24 00:00:00.000000000",
    "2021-11-23 00:00:00.000000000",
    "2021-11-22 00:00:00.000000000",
    "2021-11-21 00:00:00.000000000",
    "2021-11-20 00:00:00.000000000",
    "2021-11-19 00:00:00.000000000",
    "2021-11-18 00:00:00.000000000",
    "2021-11-17 00:00:00.000000000",
    "2021-11-16 00:00:00.000000000",
    "2021-11-15 00:00:00.000000000",
    "2021-11-14 00:00:00.000000000",
    "2021-11-13 00:00:00.000000000",
    "2021-11-12 00:00:00.000000000",
    "2021-11-11 00:00:00.000000000",
    "2021-11-10 00:00:00.000000000",
    "2021-11-09 00:00:00.000000000",
    "2021-11-08 00:00:00.000000000",
    "2021-11-07 00:00:00.000000000",
    "2021-11-06 00:00:00.000000000",
    "2021-11-05 00:00:00.000000000",
    "2021-11-04 00:00:00.000000000",
    "2021-11-03 00:00:00.000000000",
    "2021-11-02 00:00:00.000000000",
    "2021-11-01 00:00:00.000000000",
    "2021-10-31 00:00:00.000000000",
    "2021-10-30 00:00:00.000000000",
    "2021-10-29 00:00:00.000000000",
    "2021-10-28 00:00:00.000000000",
    "2021-10-27 00:00:00.000000000",
    "2021-10-26 00:00:00.000000000",
    "2021-10-25 00:00:00.000000000",
    "2021-10-24 00:00:00.000000000",
    "2021-10-23 00:00:00.000000000",
    "2021-10-22 00:00:00.000000000",
    "2021-10-21 00:00:00.000000000",
    "2021-10-20 00:00:00.000000000",
    "2021-10-19 00:00:00.000000000",
    "2021-10-18 00:00:00.000000000",
    "2021-10-17 00:00:00.000000000",
    "2021-10-16 00:00:00.000000000",
    "2021-10-15 00:00:00.000000000",
    "2021-10-14 00:00:00.000000000",
    "2021-10-13 00:00:00.000000000",
    "2021-10-12 00:00:00.000000000",
    "2021-10-11 00:00:00.000000000",
    "2021-10-10 00:00:00.000000000",
    "2021-10-09 00:00:00.000000000",
    "2021-10-08 00:00:00.000000000",
    "2021-10-07 00:00:00.000000000",
    "2021-10-06 00:00:00.000000000",
    "2021-10-05 00:00:00.000000000",
    "2021-10-04 00:00:00.000000000",
    "2021-10-03 00:00:00.000000000",
    "2021-10-02 00:00:00.000000000",
    "2021-10-01 00:00:00.000000000",
    "2021-09-30 00:00:00.000000000",
    "2021-09-29 00:00:00.000000000",
    "2021-09-28 00:00:00.000000000",
    "2021-09-27 00:00:00.000000000",
    "2021-09-26 00:00:00.000000000",
    "2021-09-25 00:00:00.000000000",
    "2021-09-24 00:00:00.000000000",
    "2021-09-23 00:00:00.000000000",
    "2021-09-22 00:00:00.000000000",
    "2021-09-21 00:00:00.000000000",
    "2021-09-20 00:00:00.000000000",
    "2021-09-19 00:00:00.000000000",
    "2021-09-18 00:00:00.000000000",
    "2021-09-17 00:00:00.000000000",
    "2021-09-16 00:00:00.000000000",
    "2021-09-15 00:00:00.000000000",
    "2021-09-14 00:00:00.000000000",
    "2021-09-13 00:00:00.000000000",
    "2021-09-12 00:00:00.000000000",
    "2021-09-11 00:00:00.000000000",
    "2021-09-10 00:00:00.000000000",
    "2021-09-09 00:00:00.000000000",
    "2021-09-08 00:00:00.000000000",
    "2021-09-07 00:00:00.000000000",
    "2021-09-06 00:00:00.000000000",
    "2021-09-05 00:00:00.000000000",
    "2021-09-04 00:00:00.000000000",
    "2021-09-03 00:00:00.000000000",
    "2021-09-02 00:00:00.000000000",
    "2021-09-01 00:00:00.000000000",
    "2021-08-31 00:00:00.000000000",
    "2021-08-30 00:00:00.000000000",
    "2021-08-29 00:00:00.000000000",
    "2021-08-28 00:00:00.000000000",
    "2021-08-27 00:00:00.000000000",
    "2021-08-26 00:00:00.000000000",
    "2021-08-25 00:00:00.000000000",
    "2021-08-24 00:00:00.000000000",
    "2021-08-23 00:00:00.000000000",
    "2021-08-22 00:00:00.000000000",
    "2021-08-21 00:00:00.000000000",
    "2021-08-20 00:00:00.000000000",
    "2021-08-19 00:00:00.000000000",
    "2021-08-18 00:00:00.000000000",
    "2021-08-17 00:00:00.000000000",
    "2021-08-16 00:00:00.000000000",
    "2021-08-15 00:00:00.000000000",
    "2021-08-14 00:00:00.000000000",
    "2021-08-13 00:00:00.000000000",
    "2021-08-12 00:00:00.000000000",
    "2021-08-11 00:00:00.000000000",
    "2021-08-10 00:00:00.000000000",
    "2021-08-09 00:00:00.000000000",
    "2021-08-08 00:00:00.000000000",
    "2021-08-07 00:00:00.000000000",
    "2021-08-06 00:00:00.000000000",
    "2021-08-05 00:00:00.000000000",
    "2021-08-04 00:00:00.000000000",
    "2021-08-03 00:00:00.000000000",
    "2021-08-02 00:00:00.000000000",
    "2021-08-01 00:00:00.000000000",
    "2021-07-31 00:00:00.000000000",
    "2021-07-30 00:00:00.000000000",
    "2021-07-29 00:00:00.000000000",
    "2021-07-28 00:00:00.000000000",
    "2021-07-27 00:00:00.000000000",
    "2021-07-26 00:00:00.000000000",
    "2021-07-25 00:00:00.000000000",
    "2021-07-24 00:00:00.000000000",
    "2021-07-23 00:00:00.000000000",
    "2021-07-22 00:00:00.000000000",
    "2021-07-21 00:00:00.000000000",
    "2021-07-20 00:00:00.000000000",
    "2021-07-19 00:00:00.000000000",
    "2021-07-18 00:00:00.000000000",
    "2021-07-17 00:00:00.000000000",
    "2021-07-16 00:00:00.000000000",
    "2021-07-15 00:00:00.000000000",
    "2021-07-14 00:00:00.000000000",
    "2021-07-13 00:00:00.000000000",
    "2021-07-12 00:00:00.000000000",
    "2021-07-11 00:00:00.000000000",
    "2021-07-10 00:00:00.000000000",
    "2021-07-09 00:00:00.000000000",
    "2021-07-08 00:00:00.000000000",
    "2021-07-07 00:00:00.000000000",
    "2021-07-06 00:00:00.000000000",
    "2021-07-05 00:00:00.000000000",
    "2021-07-04 00:00:00.000000000",
    "2021-07-03 00:00:00.000000000",
    "2021-07-02 00:00:00.000000000",
    "2021-07-01 00:00:00.000000000",
    "2021-06-30 00:00:00.000000000",
    "2021-06-29 00:00:00.000000000",
    "2021-06-28 00:00:00.000000000",
    "2021-06-27 00:00:00.000000000",
    "2021-06-26 00:00:00.000000000",
    "2021-06-25 00:00:00.000000000",
    "2021-06-24 00:00:00.000000000",
    "2021-06-23 00:00:00.000000000",
    "2021-06-22 00:00:00.000000000",
    "2021-06-21 00:00:00.000000000",
    "2021-06-20 00:00:00.000000000",
    "2021-06-19 00:00:00.000000000",
    "2021-06-18 00:00:00.000000000",
    "2021-06-17 00:00:00.000000000",
    "2021-06-16 00:00:00.000000000",
    "2021-06-15 00:00:00.000000000",
    "2021-06-14 00:00:00.000000000",
    "2021-06-13 00:00:00.000000000",
    "2021-06-12 00:00:00.000000000",
    "2021-06-11 00:00:00.000000000",
    "2021-06-10 00:00:00.000000000",
    "2021-06-09 00:00:00.000000000",
    "2021-06-08 00:00:00.000000000",
    "2021-06-07 00:00:00.000000000",
    "2021-06-06 00:00:00.000000000",
    "2021-06-05 00:00:00.000000000",
    "2021-06-04 00:00:00.000000000",
    "2021-06-03 00:00:00.000000000",
    "2021-06-02 00:00:00.000000000",
    "2021-06-01 00:00:00.000000000",
    "2021-05-31 00:00:00.000000000",
    "2021-05-30 00:00:00.000000000",
    "2021-05-29 00:00:00.000000000",
    "2021-05-28 00:00:00.000000000",
    "2021-05-27 00:00:00.000000000",
    "2021-05-26 00:00:00.000000000",
    "2021-05-25 00:00:00.000000000",
    "2021-05-24 00:00:00.000000000",
    "2021-05-23 00:00:00.000000000",
    "2021-05-22 00:00:00.000000000",
    "2021-05-21 00:00:00.000000000",
    "2021-05-20 00:00:00.000000000",
    "2021-05-19 00:00:00.000000000",
    "2021-05-18 00:00:00.000000000",
    "2021-05-17 00:00:00.000000000",
    "2021-05-16 00:00:00.000000000",
    "2021-05-15 00:00:00.000000000",
    "2021-05-14 00:00:00.000000000",
    "2021-05-13 00:00:00.000000000",
    "2021-05-12 00:00:00.000000000",
    "2021-05-11 00:00:00.000000000",
    "2021-05-10 00:00:00.000000000",
    "2021-05-09 00:00:00.000000000",
    "2021-05-08 00:00:00.000000000",
    "2021-05-07 00:00:00.000000000",
    "2021-05-06 00:00:00.000000000",
    "2021-05-05 00:00:00.000000000",
    "2021-05-04 00:00:00.000000000",
    "2021-05-03 00:00:00.000000000",
    "2021-05-02 00:00:00.000000000",
    "2021-05-01 00:00:00.000000000",
    "2021-04-30 00:00:00.000000000",
    "2021-04-29 00:00:00.000000000",
    "2021-04-28 00:00:00.000000000",
    "2021-04-27 00:00:00.000000000",
    "2021-04-26 00:00:00.000000000",
    "2021-04-25 00:00:00.000000000",
    "2021-04-24 00:00:00.000000000",
    "2021-04-23 00:00:00.000000000",
    "2021-04-22 00:00:00.000000000",
    "2021-04-21 00:00:00.000000000",
    "2021-04-20 00:00:00.000000000",
    "2021-04-19 00:00:00.000000000",
    "2021-04-18 00:00:00.000000000",
    "2021-04-17 00:00:00.000000000",
    "2021-04-16 00:00:00.000000000",
    "2021-04-15 00:00:00.000000000",
    "2021-04-14 00:00:00.000000000",
    "2021-04-13 00:00:00.000000000",
    "2021-04-12 00:00:00.000000000",
    "2021-04-11 00:00:00.000000000",
    "2021-04-10 00:00:00.000000000",
    "2021-04-09 00:00:00.000000000"
  ];

  pdatapoints = [
    "61.2",
    "61.2",
    "61.2",
    "61.2",
    "61.2",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "53.0",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "54.27",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "65.5",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "63.33",
    "127.73",
    "127.73",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "59.53",
    "0.0"
  ];
  pdateArray = [
    "2022-04-05 00:00:00.000000000",
    "2022-04-04 00:00:00.000000000",
    "2022-04-03 00:00:00.000000000",
    "2022-04-02 00:00:00.000000000",
    "2022-04-01 00:00:00.000000000",
    "2022-03-31 00:00:00.000000000",
    "2022-03-30 00:00:00.000000000",
    "2022-03-29 00:00:00.000000000",
    "2022-03-28 00:00:00.000000000",
    "2022-03-27 00:00:00.000000000",
    "2022-03-26 00:00:00.000000000",
    "2022-03-25 00:00:00.000000000",
    "2022-03-24 00:00:00.000000000",
    "2022-03-23 00:00:00.000000000",
    "2022-03-22 00:00:00.000000000",
    "2022-03-21 00:00:00.000000000",
    "2022-03-20 00:00:00.000000000",
    "2022-03-19 00:00:00.000000000",
    "2022-03-18 00:00:00.000000000",
    "2022-03-17 00:00:00.000000000",
    "2022-03-16 00:00:00.000000000",
    "2022-03-15 00:00:00.000000000",
    "2022-03-14 00:00:00.000000000",
    "2022-03-13 00:00:00.000000000",
    "2022-03-12 00:00:00.000000000",
    "2022-03-11 00:00:00.000000000",
    "2022-03-10 00:00:00.000000000",
    "2022-03-09 00:00:00.000000000",
    "2022-03-08 00:00:00.000000000",
    "2022-03-07 00:00:00.000000000",
    "2022-03-06 00:00:00.000000000",
    "2022-03-05 00:00:00.000000000",
    "2022-03-04 00:00:00.000000000",
    "2022-03-03 00:00:00.000000000",
    "2022-03-02 00:00:00.000000000",
    "2022-03-01 00:00:00.000000000",
    "2022-02-28 00:00:00.000000000",
    "2022-02-27 00:00:00.000000000",
    "2022-02-26 00:00:00.000000000",
    "2022-02-25 00:00:00.000000000",
    "2022-02-24 00:00:00.000000000",
    "2022-02-23 00:00:00.000000000",
    "2022-02-22 00:00:00.000000000",
    "2022-02-21 00:00:00.000000000",
    "2022-02-20 00:00:00.000000000",
    "2022-02-19 00:00:00.000000000",
    "2022-02-18 00:00:00.000000000",
    "2022-02-17 00:00:00.000000000",
    "2022-02-16 00:00:00.000000000",
    "2022-02-15 00:00:00.000000000",
    "2022-02-14 00:00:00.000000000",
    "2022-02-13 00:00:00.000000000",
    "2022-02-12 00:00:00.000000000",
    "2022-02-11 00:00:00.000000000",
    "2022-02-10 00:00:00.000000000",
    "2022-02-09 00:00:00.000000000",
    "2022-02-08 00:00:00.000000000",
    "2022-02-07 00:00:00.000000000",
    "2022-02-06 00:00:00.000000000",
    "2022-02-06 00:00:00.000000000",
    "2022-02-05 00:00:00.000000000",
    "2022-02-05 00:00:00.000000000",
    "2022-02-04 00:00:00.000000000",
    "2022-02-04 00:00:00.000000000",
    "2022-02-03 00:00:00.000000000",
    "2022-02-03 00:00:00.000000000",
    "2022-02-02 00:00:00.000000000",
    "2022-02-02 00:00:00.000000000",
    "2022-02-01 00:00:00.000000000",
    "2022-02-01 00:00:00.000000000",
    "2022-01-20 00:00:00.000000000",
    "2022-01-19 00:00:00.000000000",
    "2022-01-18 00:00:00.000000000",
    "2022-01-17 00:00:00.000000000",
    "2022-01-16 00:00:00.000000000",
    "2022-01-15 00:00:00.000000000",
    "2022-01-14 00:00:00.000000000",
    "2022-01-13 00:00:00.000000000",
    "2022-01-12 00:00:00.000000000",
    "2022-01-11 00:00:00.000000000",
    "2022-01-10 00:00:00.000000000",
    "2022-01-09 00:00:00.000000000",
    "2022-01-08 00:00:00.000000000",
    "2022-01-07 00:00:00.000000000",
    "2022-01-06 00:00:00.000000000",
    "2022-01-05 00:00:00.000000000",
    "2022-01-04 00:00:00.000000000",
    "2022-01-03 00:00:00.000000000",
    "2022-01-02 00:00:00.000000000",
    "2022-01-01 00:00:00.000000000",
    "2021-12-31 00:00:00.000000000",
    "2021-12-30 00:00:00.000000000",
    "2021-12-29 00:00:00.000000000",
    "2021-12-28 00:00:00.000000000",
    "2021-12-27 00:00:00.000000000",
    "2021-12-26 00:00:00.000000000",
    "2021-12-25 00:00:00.000000000",
    "2021-12-24 00:00:00.000000000",
    "2021-12-23 00:00:00.000000000",
    "2021-12-22 00:00:00.000000000",
    "2021-12-21 00:00:00.000000000",
    "2021-12-20 00:00:00.000000000",
    "2021-12-19 00:00:00.000000000",
    "2021-12-18 00:00:00.000000000",
    "2021-12-17 00:00:00.000000000",
    "2021-12-16 00:00:00.000000000",
    "2021-12-15 00:00:00.000000000",
    "2021-12-14 00:00:00.000000000",
    "2021-12-13 00:00:00.000000000",
    "2021-12-12 00:00:00.000000000",
    "2021-12-11 00:00:00.000000000",
    "2021-12-10 00:00:00.000000000",
    "2021-12-09 00:00:00.000000000",
    "2021-12-08 00:00:00.000000000",
    "2021-12-07 00:00:00.000000000",
    "2021-12-06 00:00:00.000000000",
    "2021-12-05 00:00:00.000000000",
    "2021-12-04 00:00:00.000000000",
    "2021-12-03 00:00:00.000000000",
    "2021-12-02 00:00:00.000000000",
    "2021-12-01 00:00:00.000000000",
    "2021-11-30 00:00:00.000000000",
    "2021-11-29 00:00:00.000000000",
    "2021-11-28 00:00:00.000000000",
    "2021-11-27 00:00:00.000000000",
    "2021-11-26 00:00:00.000000000",
    "2021-11-25 00:00:00.000000000",
    "2021-11-24 00:00:00.000000000",
    "2021-11-23 00:00:00.000000000",
    "2021-11-22 00:00:00.000000000",
    "2021-11-21 00:00:00.000000000",
    "2021-11-20 00:00:00.000000000",
    "2021-11-19 00:00:00.000000000",
    "2021-11-18 00:00:00.000000000",
    "2021-11-17 00:00:00.000000000",
    "2021-11-16 00:00:00.000000000",
    "2021-11-15 00:00:00.000000000",
    "2021-11-14 00:00:00.000000000",
    "2021-11-13 00:00:00.000000000",
    "2021-11-12 00:00:00.000000000",
    "2021-11-11 00:00:00.000000000",
    "2021-11-10 00:00:00.000000000",
    "2021-11-09 00:00:00.000000000",
    "2021-11-08 00:00:00.000000000",
    "2021-11-07 00:00:00.000000000",
    "2021-11-06 00:00:00.000000000",
    "2021-11-05 00:00:00.000000000",
    "2021-11-04 00:00:00.000000000",
    "2021-11-03 00:00:00.000000000",
    "2021-11-02 00:00:00.000000000",
    "2021-11-01 00:00:00.000000000",
    "2021-11-01 00:00:00.000000000",
    "2021-10-31 00:00:00.000000000",
    "2021-10-31 00:00:00.000000000",
    "2021-10-30 00:00:00.000000000",
    "2021-10-30 00:00:00.000000000",
    "2021-10-29 00:00:00.000000000",
    "2021-10-29 00:00:00.000000000",
    "2021-10-28 00:00:00.000000000",
    "2021-10-27 00:00:00.000000000",
    "2021-10-24 00:00:00.000000000",
    "2021-10-23 00:00:00.000000000",
    "2021-10-22 00:00:00.000000000",
    "2021-10-21 00:00:00.000000000",
    "2021-10-20 00:00:00.000000000",
    "2021-10-19 00:00:00.000000000",
    "2021-10-18 00:00:00.000000000",
    "2021-10-17 00:00:00.000000000",
    "2021-10-16 00:00:00.000000000",
    "2021-10-15 00:00:00.000000000",
    "2021-10-14 00:00:00.000000000",
    "2021-10-13 00:00:00.000000000",
    "2021-10-12 00:00:00.000000000",
    "2021-10-11 00:00:00.000000000",
    "2021-10-10 00:00:00.000000000",
    "2021-10-09 00:00:00.000000000",
    "2021-10-08 00:00:00.000000000",
    "2021-10-07 00:00:00.000000000",
    "2021-10-06 00:00:00.000000000",
    "2021-10-05 00:00:00.000000000",
    "2021-10-04 00:00:00.000000000",
    "2021-10-03 00:00:00.000000000",
    "2021-10-02 00:00:00.000000000",
    "2021-10-01 00:00:00.000000000",
    "2021-09-30 00:00:00.000000000",
    "2021-09-29 00:00:00.000000000",
    "2021-09-28 00:00:00.000000000",
    "2021-09-27 00:00:00.000000000",
    "2021-09-26 00:00:00.000000000",
    "2021-09-25 00:00:00.000000000",
    "2021-09-24 00:00:00.000000000",
    "2021-09-23 00:00:00.000000000",
    "2021-09-22 00:00:00.000000000",
    "2021-09-21 00:00:00.000000000",
    "2021-09-20 00:00:00.000000000",
    "2021-09-19 00:00:00.000000000",
    "2021-09-18 00:00:00.000000000",
    "2021-09-17 00:00:00.000000000",
    "2021-09-16 00:00:00.000000000",
    "2021-09-15 00:00:00.000000000",
    "2021-09-14 00:00:00.000000000",
    "2021-09-13 00:00:00.000000000",
    "2021-09-12 00:00:00.000000000",
    "2021-09-11 00:00:00.000000000",
    "2021-09-10 00:00:00.000000000",
    "2021-09-09 00:00:00.000000000",
    "2021-09-08 00:00:00.000000000",
    "2021-09-07 00:00:00.000000000",
    "2021-09-06 00:00:00.000000000",
    "2021-09-05 00:00:00.000000000",
    "2021-09-04 00:00:00.000000000",
    "2021-09-03 00:00:00.000000000",
    "2021-09-02 00:00:00.000000000",
    "2021-09-01 00:00:00.000000000",
    "2021-08-31 00:00:00.000000000",
    "2021-08-30 00:00:00.000000000",
    "2021-08-29 00:00:00.000000000",
    "2021-08-28 00:00:00.000000000",
    "2021-08-27 00:00:00.000000000",
    "2021-08-26 00:00:00.000000000",
    "2021-08-25 00:00:00.000000000",
    "2021-08-24 00:00:00.000000000",
    "2021-08-23 00:00:00.000000000",
    "2021-08-22 00:00:00.000000000",
    "2021-08-21 00:00:00.000000000",
    "2021-08-20 00:00:00.000000000",
    "2021-08-19 00:00:00.000000000",
    "2021-08-18 00:00:00.000000000",
    "2021-08-17 00:00:00.000000000",
    "2021-08-16 00:00:00.000000000",
    "2021-08-15 00:00:00.000000000",
    "2021-08-14 00:00:00.000000000",
    "2021-08-13 00:00:00.000000000",
    "2021-08-12 00:00:00.000000000",
    "2021-08-11 00:00:00.000000000"
  ];


  frequency = 'Daily';
  pdata:any = [];
  pdata_bp1:any = [];
  pdata_bp2:any = [];
  uoMergedArr:any = [];

  ngAfterViewInit() {
    this.orderData()
    this.canvas = this.mychart.nativeElement;
    this.ctx = this.canvas.getContext('2d');

    //this.plotBoxChart();
    this.plotChart('bar');
    
  }

  plotChart(chart_type:string){

    var gradientFill = this.ctx.createLinearGradient(500, 200, 0, 0);
		gradientFill.addColorStop(0, "rgba(66, 129, 245, 0)");
		gradientFill.addColorStop(1, "rgba(66, 129, 245, 1)");

   if(this.plannedValueExist())
    {
      this.pdata = [
        { label:'Actual Value',
          data: this.oKpiArr.map(Number),
          backgroundColor: chart_type == 'line'?gradientFill : 'rgba(196, 210, 255, 0.6)',
          borderColor: 'rgb(66, 129, 245)',
          borderWidth: 2,
          fill: true,
        },{
          label:'Planned Value',
          type: chart_type,
          data: this.oPlannedArr.map(Number),
          borderColor:'#cf1515',
          backgroundColor: 'rgba(245, 66, 66, 0.2)',
          borderWidth:2,
          fill:true
      }
      ]     
    }
    else{
      this.pdata = [
        { 
          label:'Actual Value',
          data: this.oKpiArr.map(Number).reverse(),
          backgroundColor: chart_type == 'line'?gradientFill : 'rgba(196, 210, 255, 0.3)',
          borderColor: 'rgb(66, 129, 245)',
          borderWidth: 2,
          fill: true,
          outlierColor:'#999999',
          padding:0,
          itemRadius:0
        }
      ]     
    }
    
    this.mixedChart = new Chart(this.ctx,{
      type: chart_type,
      data: {
        labels:this.returnParsedDate(this.oDatesArr, 'Monthly'),
          datasets: this.pdata,},
          options: {
            legend:{
              display:true,
            },
            responsive: true,
            scales: {
              xAxes: [ {
              display: true,
              scaleLabel: {
                display: true,
                labelString: 'Dates'
              },
              ticks: {
                major: {
                fontStyle: 'bold',
                fontColor: '#FF0000'
                }
              }
              } ],
              yAxes: [ {
              display: true,
              scaleLabel: {
                display: true,
                labelString: 'Values'
              },
							ticks: {
								beginAtZero:true,
								min:0
							},
              } ]
            }
            }
        });
        this.mixedChart.update();
  }

  orderData(){
    let uoKpiArr:any = [];
    for(let i=0;i<this.dateArray.length;i++){
      uoKpiArr.push({date:this.dateArray[i],kpiValue:this.datapoints[i]});
    }
    let uoPlannedArr:any = [];
    for(let i=0;i<this.pdateArray.length;i++){
      uoPlannedArr.push({date:this.pdateArray[i],plannedValue:this.pdatapoints[i]});
    }

    //uoMergedArr = uoKpiArr.map((item:any, i:any) => Object.assign({}, item, uoPlannedArr[i]));

    let merged = _.merge(_.keyBy( uoKpiArr, 'date'), _.keyBy(uoPlannedArr, 'date'));
    this.uoMergedArr = _.values(merged);

    this.uoMergedArr.sort((a:any, b:any) => a.date.localeCompare(b.date));

    this.oDatesArr = this.uoMergedArr.map((a:any) => a.date);
    this.oKpiArr = this.uoMergedArr.map((a:any) => a.kpiValue == undefined ? '0' : a.kpiValue );
    this.oPlannedArr = this.uoMergedArr.map((a:any) => a.plannedValue == undefined ? '0' : a.plannedValue );

    
    const startdate = document.getElementById('startdate') as HTMLInputElement;
    const enddate = document.getElementById('enddate') as HTMLInputElement;

    
    let start = moment(this.uoMergedArr[0].date).format("YYYY-MM-DD");
    this.frequencydate=moment(this.uoMergedArr[0].date).format("LLL");
    let end = moment(this.uoMergedArr[this.uoMergedArr.length - 1].date).format("YYYY-MM-DD");

    startdate.value = start === null ? '' : start;
    enddate.value = end === null ? '' : end;

  }

  precision(){
     return (+ this.datapoints[0]).toFixed(2) ;
  }

  bar(){
    this.chart_type="bar";
    this.mixedChart.destroy();
    this.plotChart("bar")
  }

  line(){
    this.chart_type="line";
    this.mixedChart.destroy();
    this.plotChart("line")
  }

  
  boxplot(){

   this.chart_type="boxplot";
   if(this.boxKpiChart != undefined){
    this.boxKpiChart.destroy()
   }
   if(this.boxPlannedChart != undefined){
    this.boxPlannedChart.destroy()
   }
   let canvas2 = this.mychart2.nativeElement;
   let ctx2 = canvas2.getContext('2d');

   let canvas3 = this.mychart3.nativeElement;
   let ctx3 = canvas3.getContext('2d');

    if (this.plannedValueExist()) {
      let kpidata = this.generateBPdata(this.datapoints.map(Number));
      let planneddata = this.generateBPdata(this.pdatapoints.map(Number));

      this.pdata_bp1 = [{
        label: 'Actual Value',
        backgroundColor: 'rgba(66, 66, 256, 0.2)',
        borderColor: 'rgb(66, 129, 245)',
        borderWidth: 1,
        data: [
          kpidata
        ],
      },
      {
        type: 'bubble',
        label: 'Outliers',
        borderColor: '#9ca1f0',
        data: this.generateBPoutliers(this.datapoints.map(Number), kpidata[0], kpidata[5], 'KPI')
      }]

      this.pdata_bp2=[{
        label: 'Planned Value',
        backgroundColor: 'rgba(256, 66, 66 , 0.2)',
        borderColor: '#cf1515',
        borderWidth: 1,
        data: [
           planneddata
        ],
      },
      {
        type: 'bubble',
        label: 'Outliers',
        borderColor: '#cf1515',
        data: this.generateBPoutliers(this.pdatapoints.map(Number), planneddata[0], planneddata[5], 'Planned')
      }]
    }
    else{

      let kpidata = this.generateBPdata(this.datapoints.map(Number));

      this.pdata_bp1 =[{
        label: 'Actual Value',
        backgroundColor: 'rgba(66, 66, 256, 0.2)',
        borderColor: 'rgb(66, 129, 245)',
        borderWidth: 1,
        data: [
          kpidata
        ],
      },
      {
        type: 'bubble',
        label: 'Outliers',
        borderColor: '#9ca1f0',
        data: this.generateBPoutliers(this.datapoints.map(Number), kpidata[0], kpidata[5], 'KPI')
      }]

    } 
     
    this.boxKpiChart = new Chart(ctx2,{
      type: 'boxplot',
      data:{  
        labels: ["KPI"],
        datasets:this.pdata_bp1
      },     
      options: {
        maintainAspectRatio:false,
        tooltips: {
          // Disable the on-canvas tooltip
          enabled: false,

          custom: function(tooltipModel:any) {
              // Tooltip Element
              var tooltipEl = document.getElementById('chartjs-tooltip')as HTMLElement;

              // Create element on first render
              if (!tooltipEl) {
                  tooltipEl = document.createElement('div');
                  tooltipEl.id = 'chartjs-tooltip';
                  tooltipEl.innerHTML = '<table></table>';
                  document.body.appendChild(tooltipEl);
              }

              // Hide if no tooltip
              if (tooltipModel.opacity === 0) {
                  tooltipEl.style.opacity = '0';
                  return;
              }

              // Set caret Position
              tooltipEl.classList.remove('above', 'below', 'no-transform');
              if (tooltipModel.yAlign) {
                  tooltipEl.classList.add(tooltipModel.yAlign);
              } else {
                  tooltipEl.classList.add('no-transform');
              }

              function getBody(bodyItem:any) {
                  return bodyItem.lines;
              }

              // Set Text
              if (tooltipModel.body) {
                  var titleLines = tooltipModel.title || [];
                  var bodyLines = tooltipModel.body.map(getBody);

                  var innerHtml = '<thead>';

                  titleLines.forEach(function(title:any) {
                      innerHtml += '<tr><th>' + title + '</th></tr>';
                  });
                  innerHtml += '</thead><tbody>';

                  bodyLines.forEach(function(body:any, i:any) {
                      var colors = tooltipModel.labelColors[i];
                      var style = 'background:' + colors.backgroundColor;
                      style += '; border-color:' + colors.borderColor;
                      style += '; border-width: 2px';
                      var span = '<span style="' + style + '"></span>';
                      innerHtml += '<tr><td>' + span + body + '</td></tr>';
                  });
                  innerHtml += '</tbody>';

                  var tableRoot = tooltipEl.querySelector('table')as HTMLElement;
                  tableRoot.innerHTML = innerHtml;
              }

              // `this` will be the overall tooltip
              var position = canvas2.getBoundingClientRect();

              // Display, position, and set styles for font
              tooltipEl.style.backgroundColor = 'black';
              tooltipEl.style.color='white';
              tooltipEl.style.opacity = '0.75';
              tooltipEl.style.position = 'absolute';
              tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
              tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
              tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
              tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
              tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
              tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
              tooltipEl.style.pointerEvents = 'none';
              tooltipEl.style.borderRadius = '8px';
          },
          callbacks:{
                title:function (tooltipItem:any,data:any){
                  return ""; 
                }
              }
      },      
        responsive: true,
        legend: {
          display:true
        },
        title: {
          display: false
        },
        scales:{
          xAxes: [ {
          display: true,
          scaleLabel: {            
            display: false,
          },
          ticks: {

            major: {
            fontStyle: 'bold',
            fontColor: '#FF0000'
            }
          }
          } ],
          yAxes: [ {
          display: true,
          scaleLabel: {
            display: true,
            labelString: 'Values'
          },
          ticks: {
          
          },
          } ]
        }
      }})

      this.boxPlannedChart = new Chart(ctx3,{
        type: 'boxplot',
        data:{  
          labels: ["Planned"],
          datasets:this.pdata_bp2
        },     
        options: {
          maintainAspectRatio:false,
          tooltips: {
            // Disable the on-canvas tooltip
            enabled: false,
  
            custom: function(tooltipModel:any) {
                // Tooltip Element
                var tooltipEl = document.getElementById('chartjs-tooltip')as HTMLElement;
  
                // Create element on first render
                if (!tooltipEl) {
                    tooltipEl = document.createElement('div');
                    tooltipEl.id = 'chartjs-tooltip';
                    tooltipEl.innerHTML = '<table></table>';
                    document.body.appendChild(tooltipEl);
                }
  
                // Hide if no tooltip
                if (tooltipModel.opacity === 0) {
                    tooltipEl.style.opacity = '0';
                    return;
                }
  
                // Set caret Position
                tooltipEl.classList.remove('above', 'below', 'no-transform');
                if (tooltipModel.yAlign) {
                    tooltipEl.classList.add(tooltipModel.yAlign);
                } else {
                    tooltipEl.classList.add('no-transform');
                }
  
                function getBody(bodyItem:any) {
                    return bodyItem.lines;
                }
  
                // Set Text
                if (tooltipModel.body) {
                    var titleLines = tooltipModel.title || [];
                    var bodyLines = tooltipModel.body.map(getBody);
  
                    var innerHtml = '<thead>';
  
                    titleLines.forEach(function(title:any) {
                        innerHtml += '<tr><th>' + title + '</th></tr>';
                    });
                    innerHtml += '</thead><tbody>';
  
                    bodyLines.forEach(function(body:any, i:any) {
                        var colors = tooltipModel.labelColors[i];
                        var style = 'background:' + colors.backgroundColor;
                        style += '; border-color:' + colors.borderColor;
                        style += '; border-width: 2px';
                        var span = '<span style="' + style + '"></span>';
                        innerHtml += '<tr><td>' + span + body + '</td></tr>';
                    });
                    innerHtml += '</tbody>';
  
                    var tableRoot = tooltipEl.querySelector('table')as HTMLElement;
                    tableRoot.innerHTML = innerHtml;
                }
  
                // `this` will be the overall tooltip
                var position = canvas2.getBoundingClientRect();
  
                // Display, position, and set styles for font
                tooltipEl.style.backgroundColor = 'black';
                tooltipEl.style.color='white';
                tooltipEl.style.opacity = '0.75';
                tooltipEl.style.position = 'absolute';
                tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
                tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
                tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
                tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
                tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
                tooltipEl.style.pointerEvents = 'none';
                tooltipEl.style.borderRadius = '8px';
            },
            callbacks:{
                  title:function (tooltipItem:any,data:any){
                    return ""; 
                  }
                }
        },
          responsive: true,
          legend: {
            display:true
          },
          title: {
            display: false
          },
          scales:{
            xAxes: [ {
            display: true,
            scaleLabel: {            
              display: false,
            },
            ticks: {
  
              major: {
              fontStyle: 'bold',
              fontColor: '#FF0000'
              }
            }
            } ],
            yAxes: [ {
            display: true,
            scaleLabel: {
              display: true,
              labelString: 'Values'
            },
            ticks: {
            
            },
            } ]
          }
        }})
  
        this.boxKpiChart.update();
        this.boxPlannedChart.update();
  }
  
  generateBPdata(arr: any) {

    // const startdate = document.getElementById('startdate') as HTMLInputElement;
    // const enddate = document.getElementById('enddate') as HTMLInputElement;

    // let xlabel = moment(startdate.value).format('L') + " - " +  moment(enddate.value).format('L');

    arr = arr.sort()

    let median = this.median(arr);


    let firsthalf = [];
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] < median) {
        firsthalf.push(arr[i]);
      }
    }

    let secondhalf = [];
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] > median) {
        secondhalf.push(arr[i]);
      }
    }

    let min = arr[0];

    let max = arr[arr.length - 1];

    let q1 = this.median(firsthalf);
    let q3 = this.median(secondhalf);

    let iqr = q3 - q1;
    let lowerf = q1 - (1.5 * iqr);
    let upperf = q3 + (1.5 * iqr);

    return this.boxplotdata = [
      lowerf, q1, median, q3, upperf
    ]

  }

  generateBPoutliers(arr: any, lowerf: any, upperf: any, xlabel: any) {

    let outliers1: any = [];

    arr.forEach(function (point: any) {
      if ((point < lowerf) || (point > upperf)) {
        outliers1.push({ x: xlabel, y: point, z: 1 });
      }
    });


    return outliers1;


  }

  median(values:any){
    if(values.length ===0) throw new Error("No inputs");
  
    values.sort(function(a:any,b:any){
      return a-b;
    });
  
    var half = Math.floor(values.length / 2);
    
    if (values.length % 2)
      return values[half];
    
    return (values[half - 1] + values[half]) / 2.0;
  }


  returnParsedDate(dateArray: string[], frequency: string) {
    let parsedArray = [];
    const options: any = {};
   
    let filterArray: string[] = [];
    dateArray.forEach(function (date) {
      filterArray.push(date.replace(new RegExp('"', 'g'), ''));
    });
   
    dateArray = filterArray;

    if (frequency == 'Yearly') options.year = 'numeric';
    else if (frequency == 'Monthly')
      (options.year = 'numeric'), (options.month = 'short');
    else if (frequency == 'Daily')
      (options.day = 'numeric'), (options.month = 'short'), (options.year= 'numeric');
    else if (frequency == 'Hourly')
      (options.day = 'numeric'),
        (options.hour = 'numeric'),
        (options.month = 'short');

    for (let date of dateArray) {
      let date1 = new Date(date).toLocaleDateString('en-IN', options);
      parsedArray.push(date1);
    }

    return parsedArray;
  }

  freqdate(frequencydate:string, frequency: string){
    const options: any = {};

    if( frequency == 'Hourly'){
      return frequencydate
    }
    else{

    let filterdate = frequencydate.replace(new RegExp('"', 'g'), '')

    if (frequency == 'Yearly') options.year = 'numeric';
    else if (frequency == 'Monthly')
      (options.year = 'numeric'), (options.month = 'short');
    else if (frequency == 'Daily')
      (options.day = 'numeric'), (options.month = 'long'), (options.year= 'numeric');
    else if (frequency == 'Hourly')
      (options.day = 'numeric'),
        (options.hour = 'numeric'),
        (options.month = 'short');


        let parsedate = new Date(filterdate).toLocaleDateString('en-IN', options);
        return parsedate;
    }
  }

  timestampToDate(dateArray: string[]) {
    let filterArray: string[] = [];

    dateArray.forEach(function (date) {
      let fDate = date.replace(new RegExp('"', 'g'), '');   
      let formattedDate  = moment(fDate).format("YYYY-MM-DD");    
      formattedDate = formattedDate === null ? '' :formattedDate;       
      filterArray.push(formattedDate);
    });
    return filterArray;
  }

  setDateRange(dateArray: string[]) {
    const startdate = document.getElementById('startdate') as HTMLInputElement;
    const enddate = document.getElementById('enddate') as HTMLInputElement;

    let filterArray: string[] = [];
    dateArray.forEach(function (date) {
      filterArray.push(date.replace(new RegExp('"', 'g'), ''));
    });

    let start = moment(filterArray[0]).format("YYYY-MM-DD");
    this.frequencydate=moment(filterArray[0]).format("LLL");
    let end = moment(filterArray[filterArray.length - 1]).format("YYYY-MM-DD");

    startdate.value = start === null ? '' : start;
    enddate.value = end === null ? '' : end;
  }

  plannedValueExist(){
    return true;
  }

  boxplotfilter(){
    const dates2 = this.timestampToDate(this.dateArray);

    const startdate = document.getElementById('startdate') as HTMLInputElement;
    const enddate = document.getElementById('enddate') as HTMLInputElement;

    let newKpidatapoints = [];
    let newPlanneddatapoints = [];

    for (let i = 0; i < dates2.length; i++) {
      if (dates2[i] >= startdate.value && dates2[i] <= enddate.value) {
        newKpidatapoints.push(this.datapoints[i]);
      }
    }

    if (this.plannedValueExist()) {
      const dates3 = this.timestampToDate(this.pdateArray);
      for (let i = 0; i < dates3.length; i++) {
        if (dates3[i] >= startdate.value && dates3[i] <= enddate.value) {    
          newPlanneddatapoints.push(this.pdatapoints[i]);
        }
      }     
    }


      let bpdata = this.generateBPdata(newKpidatapoints.map(Number));
      this.boxKpiChart.data.datasets[0].data = [bpdata];
      this.boxKpiChart.data.datasets[1].data = this.generateBPoutliers(newKpidatapoints.map(Number),bpdata[0],bpdata[5],'KPI'); // outliers updated data
      this.boxKpiChart.update();
      
      if (this.plannedValueExist()) {
        let bpdatap = this.generateBPdata(newPlanneddatapoints.map(Number));

        this.boxPlannedChart.data.datasets[0].data = [bpdatap];
        this.boxPlannedChart.data.datasets[1].data =  this.generateBPoutliers(newPlanneddatapoints.map(Number),bpdatap[0],bpdatap[5],'Planned');  //outliers for planned (updated)
        this.boxPlannedChart.update();
      }
    

  }

  linebarfilter(){
    
    const dates2 = this.timestampToDate(this.oDatesArr);

    const startdate = document.getElementById('startdate') as HTMLInputElement;
    const enddate = document.getElementById('enddate') as HTMLInputElement;

    let newdates = [];
    let newKpidatapoints = [];
    let newPlanneddatapoints = [];

    for (let i = 0; i < dates2.length; i++) {
      if (dates2[i] >= startdate.value && dates2[i] <= enddate.value) {
        newdates.push(dates2[i]);
        newKpidatapoints.push(this.oKpiArr[i]);
        if (this.plannedValueExist()) {
          newPlanneddatapoints.push(this.oPlannedArr[i]);
        }
      }
    }

    this.mixedChart.data.labels = this.returnParsedDate(newdates, this.frequency);
    this.mixedChart.data.datasets[0].data = newKpidatapoints;

    if (this.plannedValueExist()) {
      this.mixedChart.data.datasets[1].data = newPlanneddatapoints;
    }

    this.mixedChart.update();

  }

  filterdata() {
    if(this.chart_type == 'boxplot'){
      this.boxplotfilter();
    }
    else{
      this.linebarfilter();
    }
  }

}
